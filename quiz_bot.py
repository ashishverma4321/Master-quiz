import logging
import asyncio
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
import google.generativeai as genai

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§µ‡•à‡§∞‡§ø‡§è‡§¨‡§≤ ‡§∏‡•á ‡§è‡§™‡•Ä‡§Ü‡§à ‡§ü‡•ã‡§ï‡§® ‡§î‡§∞ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§≤‡•á‡§Ç
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
    logging.error("TELEGRAM_BOT_TOKEN ‡§Ø‡§æ GEMINI_API_KEY ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
    exit()

# Gemini API ‡§ï‡•ã ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç
genai.configure(api_key=GEMINI_API_KEY)

# Gemini ‡§Æ‡•â‡§°‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
model = genai.GenerativeModel("gemini-1.5-flash")

# ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•á ‡§µ‡§ø‡§∑‡§Ø
QUIZ_TOPICS = ["‡§á‡§§‡§ø‡§π‡§æ‡§∏", "‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®", "‡§≠‡•Ç‡§ó‡•ã‡§≤", "‡§ï‡§≤‡§æ", "‡§ñ‡•á‡§≤", "‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä"]

# ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ï‡•ç‡§∂‡§®‡§∞‡•Ä
user_data = {}
MAX_QUIZZES = 100

# /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§ú‡§¨ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ú‡§æ‡§∞‡•Ä ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§§‡•ã ‡§Ø‡§π ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§¨‡§ü‡§® ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à."""
    user_data[update.effective_user.id] = {"quiz_count": 0, "current_topic": None}
    
    keyboard = [
        [InlineKeyboardButton(topic, callback_data=f"topic_{topic}")]
        for topic in QUIZ_TOPICS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§è‡§ï AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å. ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ñ‡•á‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
        reply_markup=reply_markup,
    )

# ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def generate_quiz(topic: str) -> dict:
    """Gemini API ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç."""
    prompt = f"""
    ‡§è‡§ï ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï JSON ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§∏‡§µ‡§æ‡§≤, ‡§ö‡§æ‡§∞ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ (A, B, C, D), ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§Ö‡§ï‡•ç‡§∑‡§∞ (A, B, C ‡§Ø‡§æ D) ‡§î‡§∞ ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§è‡§ï ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•ã.
    ‡§Ø‡§π ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º "{topic}" ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è.
    ‡§â‡§¶‡§æ‡§π‡§∞‡§£:
    {{
      "question": "‡§Æ‡§æ‡§®‡§µ ‡§∂‡§∞‡•Ä‡§∞ ‡§ï‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡•Ä ‡§π‡§°‡•ç‡§°‡•Ä ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§π‡•à?",
      "options": {{
        "A": "‡§´‡§º‡•á‡§Æ‡§∞",
        "B": "‡§ü‡§ø‡§¨‡§ø‡§Ü",
        "C": "‡§´‡§º‡§ø‡§¨‡•Å‡§≤‡§æ",
        "D": "‡§π‡•ç‡§Ø‡•Ç‡§Æ‡§∞‡§∏"
      }},
      "correct_answer": "A",
      "explanation": "‡§´‡§º‡•á‡§Æ‡§∞, ‡§ú‡§ø‡§∏‡•á ‡§ú‡§æ‡§Å‡§ò ‡§ï‡•Ä ‡§π‡§°‡•ç‡§°‡•Ä ‡§≠‡•Ä ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§Æ‡§æ‡§®‡§µ ‡§∂‡§∞‡•Ä‡§∞ ‡§ï‡•Ä ‡§∏‡§¨‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä ‡§î‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡§°‡•ç‡§°‡•Ä ‡§π‡•à."
    }}
    JSON ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´‡§º ‡§Ø‡§π‡•Ä ‡§è‡§ï ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è.
    """
    try:
        response = model.generate_content(prompt)
        quiz_data_str = response.text.replace("```json", "").replace("```", "").strip()
        quiz_data = json.loads(quiz_data_str)
        return quiz_data
    except Exception as e:
        logging.error(f"Failed to generate quiz: {e}")
        return None

# ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def send_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã ‡§®‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§≠‡•á‡§ú‡•á‡§Ç."""
    user_id = update.effective_user.id
    if user_id not in user_data or not user_data[user_id].get("current_topic"):
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§è‡§ï ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç.")
        return

    current_topic = user_data[user_id]["current_topic"]
    
    # ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•Ä ‡§ó‡§ø‡§®‡§§‡•Ä ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç
    if user_data[user_id]["quiz_count"] >= MAX_QUIZZES:
        await update.message.reply_text(
            "‡§Ü‡§™ 100 ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç. ‡§®‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç."
        )
        return

    quiz = await generate_quiz(current_topic)
    if not quiz:
        await update.message.reply_text("‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à.")
        return

    user_data[user_id]["quiz"] = quiz
    user_data[user_id]["quiz_count"] += 1

    question = quiz["question"]
    options = quiz["options"]
    message_text = f"<b>‡§∏‡§µ‡§æ‡§≤:</b> {question}\n\n"
    for key, value in options.items():
        message_text += f"<b>{key}:</b> {value}\n"
    
    # ‡§∏‡•ç‡§ü‡•â‡§™ ‡§¨‡§ü‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    stop_keyboard = [
        [InlineKeyboardButton("‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data="stop_quiz")]
    ]
    stop_reply_markup = InlineKeyboardMarkup(stop_keyboard)
    
    await update.message.reply_html(message_text, reply_markup=stop_reply_markup)

# ‡§¨‡§ü‡§® (callback query) ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_data:
        await start(query, context)
        return
        
    data = query.data

    if data.startswith("topic_"):
        topic = data.split("_")[1]
        user_data[user_id]["current_topic"] = topic
        user_data[user_id]["quiz_count"] = 0
        await query.edit_message_text(f"‡§†‡•Ä‡§ï ‡§π‡•à, ‡§π‡§Æ {topic} ‡§™‡§∞ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
        await send_quiz(query, context)
    elif data == "stop_quiz":
        user_data[user_id]["current_topic"] = None
        user_data[user_id]["quiz_count"] = 0
        await query.edit_message_text("‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à. ‡§®‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç.")
        

# ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§ó‡§≤‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç."""
    user_id = update.effective_user.id
    if user_id not in user_data or not user_data[user_id].get("current_topic"):
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§è‡§ï ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç.")
        return

    user_answer = update.message.text.strip().upper()
    quiz = user_data[user_id]["quiz"]
    correct_answer = quiz["correct_answer"].upper()

    if user_answer == correct_answer:
        explanation = quiz["explanation"]
        await update.message.reply_text(f"‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨! üéâ\n\n<b>‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ:</b> {explanation}", parse_mode="HTML")
    else:
        await update.message.reply_text(
            f"‡§ó‡§º‡§≤‡§§ ‡§ú‡§µ‡§æ‡§¨! üòî\n‡§∏‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§•‡§æ: <b>{correct_answer}</b>\n\n<b>‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ:</b> {quiz['explanation']}",
            parse_mode="HTML",
        )

    # 15 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ö‡§ó‡§≤‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§≠‡•á‡§ú‡•á‡§Ç
    await asyncio.sleep(15)
    await send_quiz(update, context)


# ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ú‡•ã ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§ó‡§æ
def main() -> None:
    """‡§¨‡•â‡§ü ‡§ö‡§≤‡§æ‡§è‡§Å."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    
    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
